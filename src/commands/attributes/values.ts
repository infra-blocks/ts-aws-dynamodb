import type { AttributeValue } from "../../types.js";

/**
 * A value substitution always starts with the `:` character.
 */
export type ValueSubstitution = `:${string}`;

/**
 * Represents a set of attribute values used in an expression.
 *
 * This class provides an automated way to generate value reference variables,
 * or substitutions, so that every value in an expression can be treated
 * the same: systematically replaced with an automatically generated variable.
 *
 * The class keeps track of the substitutions generated for each value, such that when
 * the user requests a substitute for a known value, that previous one is returned.
 *
 * Values are compared using the SameValueZero algorithm(it uses a Map internally).
 * This means that:
 * ```ts
 * assert(values.substitute(new Set([1,2,3])) !== values.substitute(new Set([1,2,3])));
 * ```
 *
 * When the user requests a reference for an unknown value, then one is generated and
 * stored for future use.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Equality_comparisons_and_sameness#same-value-zero_equality
 */
export class AttributeValues {
  private readonly values: Map<AttributeValue, ValueSubstitution>;

  private constructor() {
    this.values = new Map<AttributeValue, ValueSubstitution>();
  }

  /**
   * Substitutes a value with a reference and returns the result.
   *
   * If the attribute value is seen for the first time by this object, a new reference is generated,
   * assigned to the attribute value, and returned.
   *
   * If the value was previously seen, then the associated reference is returned.
   *
   * @param value - The attribute value to generate a reference for.
   *
   * @returns The reference associated with the attribute value.
   */
  substitute(value: AttributeValue): ValueSubstitution {
    return this.values.get(value) ?? this.getAndSetNextSubstitutionFor(value);
  }

  /**
   * Returns record of all substitutions made by this object where the keys are
   * the value references and the values are the attribute values they correspond to.
   *
   * @returns A mapping of value references generated by this object, undefined if none were.
   */
  getSubstitutions(): Record<ValueSubstitution, AttributeValue> | undefined {
    if (this.values.size === 0) {
      return undefined;
    }

    const result: Record<ValueSubstitution, AttributeValue> = {};
    for (const [value, reference] of this.values.entries()) {
      result[reference] = value;
    }
    return result;
  }

  private getAndSetNextSubstitutionFor(
    value: AttributeValue,
  ): ValueSubstitution {
    const reference = `:value${this.values.size + 1}` as ValueSubstitution;
    this.values.set(value, reference);
    return reference;
  }

  static create(): AttributeValues {
    return new AttributeValues();
  }
}
